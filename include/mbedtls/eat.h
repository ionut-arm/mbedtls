#ifndef MBEDTLS_SSL_EAT_H
#define MBEDTLS_SSL_EAT_H

#include <stdio.h>
#include <inttypes.h>
#include "psa/crypto.h"

#define NONCE_TEST_VALUE                 0x0,0x01,0x02,0x03,0x04,0x05,0x06,0x07

/*
 * Hard coded keys for testing the PAT and KAT signing.
 */
#define PAK_PRIVATE_KEY_prime256r1 \
0xf1, 0xb7, 0x14, 0x23, 0x43, 0x40, 0x2f, 0x3b, 0x5d, 0xe7, 0x31, 0x5e, 0xa8, \
0x94, 0xf9, 0xda, 0x5c, 0xf5, 0x03, 0xff, 0x79, 0x38, 0xa3, 0x7c, 0xa1, 0x4e, \
0xb0, 0x32, 0x86, 0x98, 0x84, 0x50

#define PAK_PRIVATE_KEY_secp384r1 \
0x03, 0xdf, 0x14, 0xf4, 0xb8, 0xa4, 0x3f, 0xd8, 0xab, 0x75, 0xa6, 0x04, 0x6b, \
0xd2, 0xb5, 0xea, 0xa6, 0xfd, 0x10, 0xb2, 0xb2, 0x03, 0xfd, 0x8a, 0x78, 0xd7, \
0x91, 0x6d, 0xe2, 0x0a, 0xa2, 0x41, 0xeb, 0x37, 0xec, 0x3d, 0x4c, 0x69, 0x3d, \
0x23, 0xba, 0x2b, 0x4f, 0x6e, 0x5b, 0x66, 0xf5, 0x7f

#define PAK_PRIVATE_KEY_secp521r1 \
0x00, 0x45, 0xd2, 0xd1, 0x43, 0x94, 0x35, 0xfa, 0xb3, 0x33, 0xb1, 0xc6, 0xc8, \
0xb5, 0x34, 0xf0, 0x96, 0x93, 0x96, 0xad, 0x64, 0xd5, 0xf5, 0x35, 0xd6, 0x5f, \
0x68, 0xf2, 0xa1, 0x60, 0x65, 0x90, 0xbb, 0x15, 0xfd, 0x53, 0x22, 0xfc, 0x97, \
0xa4, 0x16, 0xc3, 0x95, 0x74, 0x5e, 0x72, 0xc7, 0xc8, 0x51, 0x98, 0xc0, 0x92, \
0x1a, 0xb3, 0xb8, 0xe9, 0x2d, 0xd9, 0x01, 0xb5, 0xa4, 0x21, 0x59, 0xad, 0xac, \
0x6d

#define KAK_PRIVATE_KEY_prime256r1 \
0xf1, 0xb7, 0x14, 0x23, 0x43, 0x40, 0x2f, 0x3b, 0x5d, 0xe7, 0x31, 0x5e, 0xa8, \
0x94, 0xf9, 0xda, 0x5c, 0xf5, 0x03, 0xff, 0x79, 0x38, 0xa3, 0x7c, 0xa1, 0x4e, \
0xb0, 0x32, 0x86, 0x98, 0x84, 0x50

#define KAK_PRIVATE_KEY_secp384r1 \
0x03, 0xdf, 0x14, 0xf4, 0xb8, 0xa4, 0x3f, 0xd8, 0xab, 0x75, 0xa6, 0x04, 0x6b, \
0xd2, 0xb5, 0xea, 0xa6, 0xfd, 0x10, 0xb2, 0xb2, 0x03, 0xfd, 0x8a, 0x78, 0xd7, \
0x91, 0x6d, 0xe2, 0x0a, 0xa2, 0x41, 0xeb, 0x37, 0xec, 0x3d, 0x4c, 0x69, 0x3d, \
0x23, 0xba, 0x2b, 0x4f, 0x6e, 0x5b, 0x66, 0xf5, 0x7f

#define KAK_PRIVATE_KEY_secp521r1 \
0x00, 0x45, 0xd2, 0xd1, 0x43, 0x94, 0x35, 0xfa, 0xb3, 0x33, 0xb1, 0xc6, 0xc8, \
0xb5, 0x34, 0xf0, 0x96, 0x93, 0x96, 0xad, 0x64, 0xd5, 0xf5, 0x35, 0xd6, 0x5f, \
0x68, 0xf2, 0xa1, 0x60, 0x65, 0x90, 0xbb, 0x15, 0xfd, 0x53, 0x22, 0xfc, 0x97, \
0xa4, 0x16, 0xc3, 0x95, 0x74, 0x5e, 0x72, 0xc7, 0xc8, 0x51, 0x98, 0xc0, 0x92, \
0x1a, 0xb3, 0xb8, 0xe9, 0x2d, 0xd9, 0x01, 0xb5, 0xa4, 0x21, 0x59, 0xad, 0xac, \
0x6d

typedef int parsec_attest_mechanism_t;

#define CLAIM_TYPE_INT     0
#define CLAIM_TYPE_BSTR    1
#define CLAIM_TYPE_TSTR    2
#define CLAIM_TYPE_UINT    3


static const uint8_t kak_private_key_256[] = {KAK_PRIVATE_KEY_prime256r1};
static const uint8_t kak_private_key_384[] = {KAK_PRIVATE_KEY_secp384r1};
static const uint8_t kak_private_key_521[] = {KAK_PRIVATE_KEY_secp521r1};

static const uint8_t pak_private_key_256[] = {PAK_PRIVATE_KEY_prime256r1};
static const uint8_t pak_private_key_384[] = {PAK_PRIVATE_KEY_secp384r1};
static const uint8_t pak_private_key_521[] = {PAK_PRIVATE_KEY_secp521r1};

#define EAT_KEY_TYPE_KAK 0
#define EAT_KEY_TYPE_PAK 1

enum t_cose_err_t fetch_key(uint8_t            key_type,
                            int32_t            cose_algorithm_id,
                            struct t_cose_key *key_pair);

int32_t
ctoken_decode_claim(struct ctoken_decode_ctx *me,
                    int label,
                    uint8_t type,
                    struct q_useful_buf_c    *content);

int32_t
ctoken_encode_claim(struct ctoken_encode_ctx *me,
                    int label,
                    uint8_t type,
                    struct q_useful_buf_c    *content);

psa_status_t create_kat_bundle(psa_key_id_t ik,         // public key of the identity key is included in KAT
                        parsec_attest_mechanism_t mech, // mechanism
                        const uint8_t *nonce,           // nonce
                        size_t nonce_len,               // nonce length
                        uint8_t *kat_bundle,            // KAT Bundle buffer
                        size_t kat_bundle_size,         // KAT Bundle buffer length (input)
                        size_t *kat_bundle_len);        // KAT Bundle length (output)

int32_t verify_kat_bundle( uint8_t *kat_bundle, size_t kat_bundle_len,
                    const uint8_t *nonce, size_t nonce_len,
                    struct t_cose_key *pak,
                    struct t_cose_key *kak,
                    uint8_t *ik_pub, size_t ik_pub_len,
                    size_t *ik_pub_size);


#endif /* MBEDTLS_SSL_EAT_H */
